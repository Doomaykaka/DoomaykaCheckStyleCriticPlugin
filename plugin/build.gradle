/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {  
    implementation "org.eclipse.persistence:org.eclipse.persistence.moxy:3.0.0"
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.0'
    
    // Use JUnit Jupiter for testing.
    implementation 'org.junit.jupiter:junit-jupiter:5.9.1'
}

gradlePlugin {
    // Define the plugin
    plugins {
        parseReport {
            id = 'doomaykacheckstylecriticplugin.parseReport'
            implementationClass = 'doomaykacheckstylecriticplugin.DoomaykaCheckStyleCriticPluginPlugin'
        	version = "1.0.0"
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
